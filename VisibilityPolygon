import numpy as np
import math 

# function to calculate internal angle
def calculate_internal_angles(vertices):
    n = len(vertices)
    if n < 3:
        return "A polygon must have at least 3 vertices."

    angles = []

    for i in range(n):
        #print(vertices[i-1])
        prev_vertex = vertices[(i - 1)%n]
        current_vertex = vertices[i]
        next_vertex = vertices[(i + 1) % n]

        # Calculate vectors from the current vertex to its neighbors
        vector1 = (prev_vertex[0] - current_vertex[0], prev_vertex[1] - current_vertex[1])
        vector2 = (next_vertex[0] - current_vertex[0], next_vertex[1] - current_vertex[1])

        # Calculate the dot product and magnitudes of the vectors
        cross_product = np.cross(vector1,vector2)
        dot_product = vector1[0] * vector2[0] + vector1[1] * vector2[1]
        magnitude1 = (vector1[0] ** 2 + vector1[1] ** 2) ** 0.5
        magnitude2 = (vector2[0] ** 2 + vector2[1] ** 2) ** 0.5

        # Calculate the angle in radians using the dot product formula
        #print(dot_product,magnitude1,magnitude2)
        angle_rad = math.acos(dot_product / (magnitude1 * magnitude2))
        # Convert the angle from radians to degrees and append it to the list
        angle_deg = math.degrees(angle_rad)
        if cross_product > 0:
            angle_deg = 360 - angle_deg
        angles.append(angle_deg)
    return angles

def find_intersection(point1, point2, point3, point4):
    x1, y1 = point1
    x2, y2 = point2
    x3, y3 = point3
    x4, y4 = point4

    m1 = (y2 - y1) / (x2 - x1) if x2 != x1 else None  
    m2 = (y4 - y3) / (x4 - x3) if x4 != x3 else None  

    if m1 == m2:
        return None  

    x_intersection = (m1 * x1 - y1 - m2 * x3 + y3) / (m1 - m2)
    y_intersection = m1 * (x_intersection - x1) + y1

    return (x_intersection, y_intersection)
'''
P = [[5.42478997125660,1.46729],									
[7.59054221089557,3.13445371600657],									
[6.09477087992189,3.33700608374259],									
[8.43191358456826,5.78321544793912],									
[6.14151373401482,4.73929170653041],									
[7.31008508633800,6.74923443252629],									
[5.87663756082156,7.63734866029191],									
[0.984218832428495,7.21666297345556],									
[2.26185684430184,6.49993921069734],									
[-1.60221909404682,3.91350128422203],									
[1.66978069245810,4.61464409561594],									
[0.298656972398893,2.66702517507730],									
[2.16837113611599,2.26192043960526],									
[3.00000000000000,5.00000000000000],									
[3.57065675890381,3.30584418101397],
[2.79161000000000,1.46729]]
'''
'''
P = [[5, 0],
[6.788811740610197, 5.739385781876024],
[3.2919045175258543, 5.248051755595924],
[4.6964364107007, 4.95950579382537],
[3.447220001402049, 4.948550585107563],
[1.7919945065881886, 2.7705977785350173],
[3.513984440900303, 1.9765329573048636],
[3.6368551626244585, 0.771541245859067],
[1.925265061375681, 0.03031305806320761],
[0, 0]]
'''
'''
P = [[5, 0],
[6.901809220978726, 6.894000463264531],
[2.95097717886227, 5.436946933861784],
[3.3227111965654927, 5.320857643496807],
[3.156703283714414, 4.949715879783481],
[2.561317773907623, 4.79531343688365],
[4.36724399467874, 4.2760212006339255],
[3.958908372404715, 3.9658380332713135],
[2.453056201966257, 3.6925194121529135],
[3.095441582699486, 2.699439288935122],
[3.1425597701050445, 2.2163131604793076],
[5.198020615302887, 2.143830697442232],
[0, 0]]
'''
'''
P = [[5, 0],
[5.887110307646149, 5.8480096035083955],
[0.17673579553394303, 5.562547050384422],
[2.5224734555153208, 5.240863330576683],
[3.8618856328243485, 5.051257182082066], 
[1.5063315621090556, 4.8951744329889575],
[5.266208426935407, 4.759875844927266],
[0.7009239737392777, 4.104597843933842],
[1.8808746898708857, 2.728700446745979],
[3.0003431030249534, 2.190932297342609],
[0.6243874444674524, 2.0675768161622967],
[3.2228908269428773, 1.2533346130893497],
[0.9572998521476135, 0.7640872440743571],
[0.22504057986841464, 0.5581295504418226],
[0, 0]]
'''
'''
P = [[5, 0],
[5.3127026198022484, 6.797070949157986],
[-2.589829076312928, 6.264574348209759],
[-1.5470029290712057, 5.016561841793801],
[-0.9249661894661729, 4.529710631313568],
[1.7480509305628713, 4.3139117404354845],
[1.3639621840142127, 4.197804660903549],
[3.991378728396878, 3.953426997651672],
[0.47653723209341514, 3.6021089454124953],
[-2.416492298623208, 2.433789194408131],
[4.799163212205645, 1.5083278935292006],
[2.321881812760644, 1.4905970597124683],
[4.211325074520954, 1.300598716244831],
[0.9827763280155706, 1.096108863901376],
[0, 0]]
'''

P = [[6, 8],
 [7, 10],
 [2, 9],
 [-1, 15],
 [-3, 11],
 [-1, 14],
 [0.044, 10.669],
 [-1, 13],
 [-2, 11],
 [-1, 12],
 [0, 10],
 [-1, 11],
 [-2, 10],
 [-1, 10],
 [0, 9],
 [-2, 9],
 [3, 8]]

def topology_arg(P):
    internal_angles = calculate_internal_angles(P)
    external_angles = []
    P1 = []
    for i in range(len(internal_angles)):
        external_angles.append(360-internal_angles[i])
    for i in range(len(P)):
        if external_angles[i] >= 180:
            P1.append(P[i])
    internal_angles = calculate_internal_angles(P1)
    external_angles = []
    for i in range(len(internal_angles)):
        external_angles.append(360-internal_angles[i])
    p = 0
    #print(external_angles)
    for i in range(len(external_angles)):
        if external_angles[i] >= 180:
            p = 0
            continue
        else:
            p = 1
            break
    while p == 1:
        internal_angles = calculate_internal_angles(P1)
        external_angles = []
        P0 = []
        for i in range(len(internal_angles)):
            external_angles.append(360-internal_angles[i])
        for i in range(len(P1)):
            if external_angles[i] >= 180:
                P0.append(P1[i])
        internal_angles = calculate_internal_angles(P0)
        external_angles = []
        for i in range(len(internal_angles)):
            external_angles.append(360-internal_angles[i])
        p = 0
        #print(external_angles)
        for i in range(len(external_angles)):
            if external_angles[i] >= 180:
                p = 0
                continue
            else:
                p = 1
                P1 = P0
                break
    return P0

#P1 = topology_arg(P)

def calculate_beaks(P):
    P1 = topology_arg(P)
    beak_array = []
    j = 0
    internal_angles = calculate_internal_angles(P)
    for i in range(len(P)):
        if P[i][0] == P1[j][0] and P[i][1] == P1[j][1]:
            j = j + 1
            beak_array.append(-1)
            continue
        else:
            if internal_angles[i] <= 180:
                beak_array.append(-1)
            else:
                if P1[j][1] > P1[j-1][1]:
                    if P[i][1] < min(P[i-1][1],P[i+1][1]):
                        if P[i][0] > P[0][0]:
                            B = find_intersection(P[i],P[i-1],P[len(P)-1],P[0])
                            if B[0] > P[len(P)-1][0]:
                                beak_array.append(0)
                            else:
                                beak_array.append(1)
                        else:
                            beak_array.append(1)
                    else:
                        beak_array.append(1)
                else:
                    if P[i][1] < min(P[i-1][1],P[i+1][1]):
                        if P[i][0] < P[len(P)-1][0]:
                            A = find_intersection(P[i],P[i+1],P[len(P)-1],P[0])
                            if A[0] < P[0][0]:
                                beak_array.append(1)
                            else:
                                beak_array.append(0)
                        else:
                            beak_array.append(0)
                    else:
                        beak_array.append(0)
    return beak_array
beak_array = calculate_beaks(P)
print(beak_array)     

def ang(point1,point2,point3):
    # point1 is not on luminious edge
    vector1 = (point1[0] - point2[0], point1[1] - point2[1])
    vector2 = (point3[0] - point2[0], point3[1] - point2[1])

        # Calculate the dot product and magnitudes of the vectors
    cross_product = np.cross(vector1,vector2)
    dot_product = vector1[0] * vector2[0] + vector1[1] * vector2[1]
    magnitude1 = (vector1[0] ** 2 + vector1[1] ** 2) ** 0.5
    magnitude2 = (vector2[0] ** 2 + vector2[1] ** 2) ** 0.5

    # Calculate the angle in radians using the dot product formula
    #print(dot_product,magnitude1,magnitude2)
    angle_rad = math.acos(dot_product / (magnitude1 * magnitude2))
    # Convert the angle from radians to degrees and append it to the list
    angle_deg = math.degrees(angle_rad)
    if cross_product > 0:
        angle_deg = 360 - angle_deg
    return angle_deg

def anti_clockwise(P):
    q = 0
    beak_anti_clockwise = [1]*len(P)
    beak_anti_clockwise[0] = 1
    beak_anti_clockwise[len(P)-1] = 1
    for i in range(1,len(P)-1):
        if q == 0:
            if beak_array[i] == -1:
                beak_anti_clockwise[i] = 1
            elif beak_array[i] == 1:
                beak_anti_clockwise[i] = 1
                q = i
            elif beak_array[i] == 0:
                beak_anti_clockwise[i] = 1
        if q != 0:
            if beak_array[i] == -1:
                angq = ang(P[q],P[len(P)-1],P[0])
                angi = ang(P[i],P[len(P)-1],P[0])
                if angi >= angq:    
                    beak_anti_clockwise[i] = 1        
                else:
                    beak_anti_clockwise[i] = 0
            elif beak_array[i] == 1:
                angq = ang(P[q],P[len(P)-1],P[0])
                angi = ang(P[i],P[len(P)-1],P[0])
                if angi >= angq:
                    beak_anti_clockwise[i] = 1
                    q = i        
                else:
                    beak_anti_clockwise[i] = 0
            elif beak_array[i] == 0:
                angq = ang(P[q],P[len(P)-1],P[0])
                angi = ang(P[i],P[len(P)-1],P[0])
                if angi >= angq:    
                    beak_anti_clockwise[i] = 1
                else:
                    if P[i][0] < P[q][0] and P[i][1] < min(P[i-1][1],P[i+1][1]):
                        beak_anti_clockwise[i] = 1
                    else:
                        beak_anti_clockwise[i] = 0
    return beak_anti_clockwise

def clockwise(P):
    q = 0
    beak_clockwise = [1]*len(P)
    beak_clockwise[0] = 1
    beak_clockwise[len(P)-1] = 1
    for i in range(len(P)-2,0,-1):
        if q == 0:
            if beak_array[i] == -1:
                beak_clockwise[i] = 1
            elif beak_array[i] == 0:
                beak_clockwise[i] = 1
                q = i
            elif beak_array[i] == 1:
                beak_clockwise[i] = 1
        if q != 0:
            if beak_array[i] == -1:
                angq = 360-ang(P[q],P[0],P[len(P)-1])
                angi = 360-ang(P[i],P[0],P[len(P)-1])
                if angq <= angi:    
                    beak_clockwise[i] = 1       
                else:
                    beak_clockwise[i] = 0
            elif beak_array[i] == 0:
                angq = 360-ang(P[q],P[0],P[len(P)-1])
                angi = 360-ang(P[i],P[0],P[len(P)-1])
                if angi >= angq:
                    beak_clockwise[i] = 1 
                    q = i        
                else:
                    beak_clockwise[i] = 0
            elif beak_array[i] == 1:
                angq = 360-ang(P[q],P[0],P[len(P)-1])
                angi = 360-ang(P[i],P[0],P[len(P)-1])
                if angi >= angq:    
                    beak_clockwise[i] = 1
                else:
                    if P[i][0] > P[q][0] and P[i][1] < min(P[i-1][1],P[i+1][1]):
                        beak_clockwise[i] = 1
                    else:
                        beak_clockwise[i] = 0
        #print(i,beak_clockwise[len(P)-1-i])
    #beak_clockwise = beak_clockwise[::-1]
    return beak_clockwise

print(anti_clockwise(P))
print(clockwise(P))
#anticlock = anti_clockwise(P)
#clock = clockwise(P)
#anticlock = anticlock[::-1]
#clock = clock[::-1]
#print(anticlock)
#print(clock)

def find_true_bin(P):
    true_bin = []
    beak_anti_clockwise = anti_clockwise(P)
    beak_clockwise = clockwise(P)
    for i in range(len(P)):
        if beak_anti_clockwise[i%len(P)] == 0 or beak_clockwise[i%len(P)] == 0:
            true_bin.append(0)
        else:
            true_bin.append(1)
    return true_bin

true_bin = find_true_bin(P)
print(true_bin)

def find_VP(P):
    beak_anti_clockwise = anti_clockwise(P)
    beak_clockwise = clockwise(P)
    true_bin = find_true_bin(P)
    beak_array = calculate_beaks(P)
    VP = []
    q = 0
    p = 0
    for i in range(0,len(P)):
        if true_bin[i] == 1:
            VP.append(P[i])
        if beak_anti_clockwise[i] == 1 and beak_array[i] == 1:
            q = i
        if true_bin[i] == 0 and true_bin[i+1] == 1:
            if beak_anti_clockwise[i] == 0 and beak_anti_clockwise[i+1] == 1:
                VP.append(find_intersection(P[len(P)-1],P[q],P[i],P[(i+1)%len(P)]))
                #print(find_intersection(P[len(P)-1],P[q],P[i],P[(i+1)%len(P)]))
        '''
        if true_bin[i%len(P)] == 0 and true_bin[(i+1)%len(P)] == 0:
            if beak_anti_clockwise[i] == 0 and beak_anti_clockwise[i+1] == 1:
                if beak_clockwise[i] != 1 and beak_clockwise[i+1] != 0:   
                    VP.append(find_intersection(P[len(P)-1],P[q],P[i],P[(i+1)%len(P)]))
        '''
        # for left beaks
        if true_bin[i%len(P)] == 1 and true_bin[(i+1)%len(P)] == 0:
            if beak_clockwise[i%len(P)] == 1 and beak_clockwise[(i+1)%len(P)] == 0:
                p = 0
                for j in range(i+1,len(P)):
                    if beak_clockwise[j] == 1 and beak_array[j] == 0:
                        p = j
                        break
                VP.append(find_intersection(P[0],P[p],P[i],P[(i+1)%len(P)]))
        '''
        if true_bin[i%len(P)] == 0 and true_bin[(i+1)%len(P)] == 0:
            if beak_clockwise[i%len(P)] == 1 and beak_clockwise[(i+1)%len(P)] == 0:
                p = 0
                for j in range(i+1,len(P)):
                    if beak_clockwise[j] == 1:
                        p = j
                        break
                if beak_anti_clockwise[i] != 0 and beak_anti_clockwise[i] != 1:    
                    VP.append(find_intersection(P[0],P[p],P[i],P[(i+1)%len(P)]))
        '''
        if true_bin[i%len(P)] == 0 and true_bin[(i+1)%len(P)] == 0:
            for j in range(i+1,len(P)):
                    if beak_clockwise[j] == 1 and beak_array[j] == 0:
                        p = j
                        break
            if P[q][1] < min(P[q-1][1],P[q+1][1]):
                if P[p][1] <= P[q][1]:
                    VP.append(find_intersection(P[len(P)-1],P[q],P[i%len(P)],P[(i+1)%len(P)]))
                    VP.append(find_intersection(P[0],P[p],P[i%len(P)],P[(i+1)%len(P)]))
            elif P[p][1] < min(P[p-1][1],P[p+1][1]):
                if P[p][1] >= P[q][1]:
                    VP.append(find_intersection(P[len(P)-1],P[q],P[i%len(P)],P[(i+1)%len(P)]))
                    VP.append(find_intersection(P[0],P[p],P[i%len(P)],P[(i+1)%len(P)]))                    
            elif q != 0 and p != 0:
                if P[q][0] <= P[i][0]:
                    VP.append(find_intersection(P[len(P)-1],P[q],P[i%len(P)],P[(i+1)%len(P)]))
                    VP.append(find_intersection(P[0],P[p],P[i%len(P)],P[(i+1)%len(P)]))
    return VP

VP = find_VP(P)
print(VP)
 
VP = [i for i in VP if i is not None]

# everything after this is to just print the P and VP
import matplotlib.pyplot as plt
# Separate the x and y coordinates from the polygon list
x1, y1 = zip(*P)

x2, y2 = zip(*VP)
# Close the polygon by repeating the first point
x1 += x1[:1]
y1 += y1[:1]

x2 += x2[:1]
y2 += y2[:1]

# Create a plot
plt.figure(figsize=(6, 6))

# Plot the polygon
plt.fill(x1, y1, 'b', alpha=0.7)  # 'b' for blue color, alpha for transparency
plt.fill(x2, y2, 'g', alpha=0.7)
# Set axis limits if needed
#plt.xlim(-5,8)
#plt.ylim(0,10)

# Add labels and a title
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.title('Polygon Plot')

# Show the plot
plt.grid(True)
plt.show()
